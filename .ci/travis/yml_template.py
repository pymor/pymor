#!/usr/bin/env python3

tpl = '''# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/travis/yml_template.py instead       #


sudo: required
dist: trusty
language: python
services: docker

python:
  - 3.6

# necessary for version.py generation to function properly
git:
    depth: 1000

notifications:
  email:
    on_success: change
    on_failure: change
    on_start: never

branches:
  except:
    - gh-pages

stages:
    - test_top
    - test_bottom
    - install_check
    - deploy


before_script:
    - export IMAGE="pymor/testing:${DOCKER_TAG}"
    - docker pull ${IMAGE}
    - docker inspect ${IMAGE}
    - export ENV_FILE=${HOME}/env
    - python3 ./.ci/travis/make_env_file.py
    - export DOCKER_RUN="docker run --privileged -e LOCAL_USER_ID=$(id -u) --env-file ${ENV_FILE} -v ${TRAVIS_BUILD_DIR}:/src ${IMAGE}"

script:
    - travis_wait 35 ${DOCKER_RUN} /src/.ci/travis/script.bash

# runs independent of 'script' failure/success
after_script:
    -  'if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then ${DOCKER_RUN} /src/.ci/travis/after_script.bash; fi'

jobs:
  include:
{%- for half in ['TOP', 'BOTTOM'] %}
    - stage: test_{{half.lower()}}
      env: PYMOR_PYTEST_MARKER="NUMPY" DOCKER_TAG="3.6" PYMOR_TEST_HALF="{{half}}"
{%- for py, m in matrix %}
    - stage: test_{{half.lower()}}
      env: PYMOR_PYTEST_MARKER="{{m}}" DOCKER_TAG="{{py}}" PYMOR_TEST_HALF="{{half}}"
{%- endfor %}
{% endfor %}
{%- for OS in testos %}
    - stage: install_check
      script: docker build -f .ci/docker/install_checks/{{OS}}/Dockerfile .
      # overwrite other global/matrix settings
      before_script: true
      after_script: true
      env: OS={{OS}}
{% endfor %}
    - stage: deploy
      if: type = push
      script: ./.ci/travis/deploy.bash
      # overwrite other global/matrix settings
      before_script: true
      after_script: true
      env: NOTHING=NONE
# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/travis/yml_template.py instead       #

'''


import os
import jinja2
import sys
from itertools import product
tpl = jinja2.Template(tpl)
pythons = ['3.5', '3.6', '3.7']
marker = [None, "PIP_ONLY", ]
with open(os.path.join(os.path.dirname(__file__), 'travis.yml'), 'wt') as yml:
    matrix = list(product(pythons, marker))
    yml.write(tpl.render(matrix=matrix,testos=['debian_stable', 'debian_testing', 'centos_7']))
