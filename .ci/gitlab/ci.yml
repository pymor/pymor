# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/gitlab/template.ci.py instead       #

stages:
  - sanity
  - test
  - build
  - install_checks
  - deploy

#************ definition of base jobs *********************************************************************************#

.test_base:
    retry:
        max: 2
        when:
            - runner_system_failure
            - api_failure
    tags:
      - autoscaling
    rules:
        - if: $CI_COMMIT_REF_NAME =~ /^staging.*/
          when: never
        - when: on_success
    variables:
        PYPI_MIRROR_TAG: dbbf2df3e2cda4e3c87ef2f7a757fb4723ccfc58
        CI_IMAGE_TAG: dbbf2df3e2cda4e3c87ef2f7a757fb4723ccfc58
        PYMOR_HYPOTHESIS_PROFILE: ci
        PYMOR_PYTEST_EXTRA: ""
        BINDERIMAGE: ${CI_REGISTRY_IMAGE}/binder:${CI_COMMIT_REF_SLUG}

.pytest:
    extends: .test_base
    tags:
      - long execution time
      - autoscaling
    environment:
        name: unsafe
    stage: test
    after_script:
      - .ci/gitlab/after_script.bash
    cache:
        key: same_db_on_all_runners
        paths:
          - .hypothesis
    artifacts:
        when: always
        name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
        expire_in: 3 months
        paths:
            - src/pymortests/testdata/check_results/*/*_changed
            - docs/source/*_extracted.py
            - coverage*
            - memory_usage.txt
            - .hypothesis
            - test_results*.xml


.submit:
    extends: .test_base
    image: zivgitlab.wwu.io/pymor/docker/pymor/ci_sanity:${CI_IMAGE_TAG}
    variables:
        XDG_CACHE_DIR: /tmp
    retry:
        max: 2
        when:
            - always
    environment:
        name: safe
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^github.*/
      when: never
    - when: on_success
    stage: deploy
    script: .ci/gitlab/submit.bash

.docker-in-docker:
    tags:
      - docker-in-docker
      - autoscaling
    extends: .test_base
    timeout: 45 minutes
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
            - unknown_failure
            - job_execution_timeout
    
    image: zivgitlab.wwu.io/pymor/docker/pymor/docker-in-docker:2022.1.0@sha256:c912491b287e5e539efc7e160a4196bfef4e3c71934ff70e66afc4da88470254

    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    before_script:
        - 'export SHARED_PATH="${CI_PROJECT_DIR}/shared"'
        - mkdir -p ${SHARED_PATH}
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/docker-in-docker:2022.1.0@sha256:c912491b287e5e539efc7e160a4196bfef4e3c71934ff70e66afc4da88470254
          alias: docker
    environment:
        name: unsafe


# this should ensure binderhubs can still build a runnable image from our repo
.binder:
    extends: .docker-in-docker
    stage: install_checks
    needs: ["ci setup"]
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        USER: juno

.check_wheel:
    extends: .test_base
    stage: install_checks
    timeout: 10 minutes
    dependencies: ["sdist_and_wheel"]
    needs: ["sdist_and_wheel"]
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    services:
      - name: zivgitlab.wwu.io/pymor/docker/pymor/devpi:${PYPI_MIRROR_TAG}
        alias: pymor__devpi
    before_script:
      # bump to our minimal version
      - python3 -m pip install devpi-client
      - devpi use http://pymor__devpi:3141/root/public --set-cfg
      - devpi login root --password ''
      - devpi upload --from-dir --formats=* ./dist/*.whl
      - python3 -m pip install pip~=21.0
      - python3 -m pip remove -y pymor || true
    # the docker service adressing fails on other runners
    tags: [mike]

.sanity_checks:
    extends: .test_base
    image: zivgitlab.wwu.io/pymor/docker/pymor/ci_sanity:${CI_IMAGE_TAG}
    stage: sanity
#******** end definition of base jobs *********************************************************************************#

# https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

#******* sanity stage

# this step makes sure that on older python our install fails with
# a nice message ala "python too old" instead of "SyntaxError"
verify setup.py:
    extends: .sanity_checks
    script:
        - python3 setup.py egg_info

ci setup:
    extends: .sanity_checks
    script:
        - ${CI_PROJECT_DIR}/.ci/gitlab/ci_sanity_check.bash "3.8 3.9"

#****** test stage
mpi 3 8:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_mpi__3.8
    retry:
        max: 2
        when: always
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.8:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_mpi.bash
mpi 3 9:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_mpi__3.9
    retry:
        max: 2
        when: always
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.9:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_mpi.bash
pip_installed 3 8:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_pip_installed__3.8
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.8:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.8:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_pip_installed.bash
pip_installed 3 9:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_pip_installed__3.9
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.9:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.9:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_pip_installed.bash
tutorials 3 8:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_tutorials__3.8
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.8:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_tutorials.bash
tutorials 3 9:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_tutorials__3.9
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.9:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_tutorials.bash
vanilla 3 8:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_vanilla__3.8
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.8:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_vanilla.bash
vanilla 3 9:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_vanilla__3.9
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.9:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_vanilla.bash
oldest 3 8:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_oldest__3.8
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_oldest_py3.8:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.8:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_oldest.bash
cpp_demo 3 8:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_cpp_demo__3.8
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.8:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_cpp_demo.bash
cpp_demo 3 9:
    extends: .pytest
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    variables:
        COVERAGE_FILE: coverage_cpp_demo__3.9
    services:
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.9:${CI_IMAGE_TAG}
    script:
        - |
          if [[ "$CI_COMMIT_REF_NAME" == *"github/PR_"* ]]; then
            echo selecting hypothesis profile "ci_pr" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci_pr"
          else
            echo selecting hypothesis profile "ci" for branch $CI_COMMIT_REF_NAME
            export PYMOR_HYPOTHESIS_PROFILE="ci"
          fi
        - ./.ci/gitlab/test_cpp_demo.bash
ci_weekly 3 8:
    extends: .pytest
    timeout: 5h
    variables:
        COVERAGE_FILE: coverage_ci_weekly
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: always
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.8:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.8:${CI_IMAGE_TAG}
    
    script: ./.ci/gitlab/test_vanilla.bash
ci_weekly 3 9:
    extends: .pytest
    timeout: 5h
    variables:
        COVERAGE_FILE: coverage_ci_weekly
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: always
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.9:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    image: zivgitlab.wwu.io/pymor/docker/pymor/testing_py3.9:${CI_IMAGE_TAG}
    
    script: ./.ci/gitlab/test_vanilla.bash

submit coverage:
    extends: .submit
    artifacts:
        when: always
        name: "submit"
        paths:
            - cover/*
            - .coverage
    dependencies:
        - mpi 3 8
        - mpi 3 9
        - vanilla 3 8
        - vanilla 3 9
        - oldest 3 8
submit ci_weekly 3 8:
    extends: .submit
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: always
    dependencies:
        - ci_weekly 3 8
    needs: ["ci_weekly 3 8"]
submit ci_weekly 3 9:
    extends: .submit
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: always
    dependencies:
        - ci_weekly 3 9
    needs: ["ci_weekly 3 9"]



from source 1/2:
    extends: .test_base
    tags: [mike]
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.9:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    needs: ["ci setup"]
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    stage: install_checks
    image: zivgitlab.wwu.io/pymor/docker/pymor/deploy_checks_fedora:${CI_IMAGE_TAG}
    script: ./.ci/gitlab/install_checks/fedora/check.bash

from source 2/2:
    extends: .test_base
    tags: [mike]
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.9:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    needs: ["ci setup"]
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    stage: install_checks
    image: zivgitlab.wwu.io/pymor/docker/pymor/deploy_checks_debian-bullseye:${CI_IMAGE_TAG}
    script: ./.ci/gitlab/install_checks/debian-bullseye/check.bash


binder base image:
    extends: .binder
    stage: build
    script:
        - docker build --build-arg CI_IMAGE_TAG=${CI_IMAGE_TAG} -t ${BINDERIMAGE} -f .ci/gitlab/Dockerfile.binder.base .
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker run ${BINDERIMAGE} ipython -c "from pymor.basic import *"
        - docker push ${BINDERIMAGE}

local docker:
    extends: .binder
    script:
        - make docker_image
        - make DOCKER_CMD="ipython -c 'from pymor.basic import *'" docker_exec


trigger_binder 1/3:
    extends: .test_base
    stage: deploy
    image: zivgitlab.wwu.io/pymor/docker/alpine:3.11
    rules:
        - if: $CI_COMMIT_REF_NAME == "main"
          when: on_success
        - if: $CI_COMMIT_TAG != null
          when: on_success
    before_script:
        - apk --update add bash python3
        - pip3 install requests
    script:
        - python3 .ci/gitlab/trigger_binder.py "https://gke.mybinder.org/build/gh/pymor/pymor/${CI_COMMIT_REF}"

trigger_binder 2/3:
    extends: .test_base
    stage: deploy
    image: zivgitlab.wwu.io/pymor/docker/alpine:3.11
    rules:
        - if: $CI_COMMIT_REF_NAME == "main"
          when: on_success
        - if: $CI_COMMIT_TAG != null
          when: on_success
    before_script:
        - apk --update add bash python3
        - pip3 install requests
    script:
        - python3 .ci/gitlab/trigger_binder.py "https://ovh.mybinder.org/build/gh/pymor/pymor/${CI_COMMIT_REF}"

trigger_binder 3/3:
    extends: .test_base
    stage: deploy
    image: zivgitlab.wwu.io/pymor/docker/alpine:3.11
    rules:
        - if: $CI_COMMIT_REF_NAME == "main"
          when: on_success
        - if: $CI_COMMIT_TAG != null
          when: on_success
    before_script:
        - apk --update add bash python3
        - pip3 install requests
    script:
        - python3 .ci/gitlab/trigger_binder.py "https://gesis.mybinder.org/build/gh/pymor/pymor/${CI_COMMIT_REF}"


sdist_and_wheel:
    extends: .sanity_checks
    stage: build
    needs: ["ci setup"]
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
    artifacts:
        paths:
        - dist/pymor*.whl
        - dist/pymor*.tar.gz
        expire_in: 1 week
    script: python3 -m build

pypi:
    extends: .test_base
    image: zivgitlab.wwu.io/pymor/docker/pymor/python_3.9:${CI_IMAGE_TAG}
    stage: deploy
    dependencies:
      - sdist_and_wheel
    rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^github.*/
      when: never
    - when: on_success
    variables:
        ARCHIVE_DIR: pyMOR_wheels-${CI_COMMIT_REF_NAME}
    artifacts:
        paths:
         - ${CI_PROJECT_DIR}/${ARCHIVE_DIR}/pymor*whl
         - ${CI_PROJECT_DIR}/${ARCHIVE_DIR}/pymor*tar.gz
        expire_in: 6 months
        name: pymor-wheels
    before_script:
        - apt update && apt install -y git
        - pip3 install -r requirements.txt
        - pip3 install twine
    script:
        - ${CI_PROJECT_DIR}/.ci/gitlab/pypi_deploy.bash
    environment:
        name: safe


from wheel 1/2:
    extends: .check_wheel
    image: zivgitlab.wwu.io/pymor/docker/pymor/deploy_checks_fedora:${CI_IMAGE_TAG}
    script:
      - echo "Testing wheel install on fedora with Python 3.9"
      - python3 -m pip freeze --all
      - devpi install pymor[full]

from wheel 2/2:
    extends: .check_wheel
    image: zivgitlab.wwu.io/pymor/docker/pymor/deploy_checks_debian-bullseye:${CI_IMAGE_TAG}
    script:
      - echo "Testing wheel install on debian-bullseye with Python 3.9"
      - python3 -m pip freeze --all
      - devpi install pymor[full]

docs build 3 8:
    extends: .test_base
    tags: [mike]
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.8:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    image: zivgitlab.wwu.io/pymor/docker/pymor/jupyter_py3.8:${CI_IMAGE_TAG}
    script:
        - ${CI_PROJECT_DIR}/.ci/gitlab/test_docs.bash
    stage: build
    needs: ["ci setup"]
    artifacts:
        paths:
            - docs/_build/html
            - docs/error.log

docs build 3 9:
    extends: .test_base
    tags: [mike]
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - when: on_success
    services:
        - name: zivgitlab.wwu.io/pymor/docker/pymor/pypi-mirror_stable_py3.9:${PYPI_MIRROR_TAG}
          alias: pypi_mirror
    image: zivgitlab.wwu.io/pymor/docker/pymor/jupyter_py3.9:${CI_IMAGE_TAG}
    script:
        - ${CI_PROJECT_DIR}/.ci/gitlab/test_docs.bash
    stage: build
    needs: ["ci setup"]
    artifacts:
        paths:
            - docs/_build/html
            - docs/error.log


docs:
    extends: .docker-in-docker
    # makes sure this doesn't land on the test runner
    tags: [mike]
    image: zivgitlab.wwu.io/pymor/docker/alpine:3.11
    stage: deploy
    resource_group: docs_deploy
    needs: ["docs build 3 9", "binder base image"]
    dependencies: ["docs build 3 9", "binder base image"]
    before_script:
        - apk --update add make python3 bash
        # chardet is a workaround for https://github.com/jupyterhub/repo2docker/issues/1063
        - pip3 install jinja2 pathlib jupyter-repo2docker six chardet
    script:
        - ${CI_PROJECT_DIR}/.ci/gitlab/deploy_docs.bash
    rules:
        - if: $CI_PIPELINE_SOURCE == "schedule"
          when: never
        - if: $CI_COMMIT_REF_NAME =~ /^github\/PR_.*/
          when: never
        - when: on_success
    environment:
        name: safe

# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/gitlab/template.ci.py instead       #
