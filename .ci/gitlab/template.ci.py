#!/usr/bin/env python3

tpl = '''# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/gitlab/template.ci.py instead       #

stages:
  - sanity
  - test
  - build
  - install_checks
  - deploy

.test_base:
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    only: ['branches', 'tags', 'triggers', 'merge-requests']
    except:
        - /^staging/.*$/i

.pytest:
    extends: .test_base
    script: .ci/gitlab/script.bash
    tags:
      - long execution time
    environment:
        name: unsafe
    stage: test
    before_script:
    # switches default index to pypi-mirror service
      - mkdir ~/.config/pip/ && cp /usr/local/share/ci.pip.conf ~/.config/pip/pip.conf
    after_script:
      - .ci/gitlab/after_script.bash
    artifacts:
        name: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
        expire_in: 3 months
        paths:
            - src/pymortests/testdata/check_results/*/*_changed
            - coverage.xml
            - memory_usage.txt
        reports:
            junit: test_results.xml

numpy-git 3 6:
    extends: .pytest
    services:
        - name: pymor/pypi-mirror_stable_py3.6:{{pypi_mirror_tag}}
          alias: pypi_mirror
    image: pymor/testing_py3.6:{{ci_image_tag}}
    variables:
        PYMOR_PYTEST_MARKER: "numpy"

oldest 3.6:
    extends: .pytest
    services:
        - name: pymor/pypi-mirror_stable_py3.6:{{pypi_mirror_tag}}
          alias: pypi_mirror
    image: pymor/testing_py3.6:{{ci_image_tag}}
    variables:
        PYMOR_PYTEST_MARKER: "OLDEST"

minimal_cpp_demo:
    extends: .pytest
    services:
        - name: pymor/pypi-mirror_stable_py3.6:{{pypi_mirror_tag}}
          alias: pypi_mirror
    image: pymor/testing_py3.7:{{ci_image_tag}}
    script: ./.ci/gitlab/cpp_demo.bash

pages build:
    extends: .docker-in-docker
    stage: build
    script:
        - apk --update add make python3
        - pip3 install jinja2 pathlib
        - make USER=pymor docker_docs
    artifacts:
        paths:
            - docs/_build/html
            - docs/error.log

pages:
    extends: .docker-in-docker
    stage: deploy
    resource_group: pages_deploy
    dependencies:
        - pages build
    variables:
        IMAGE: ${CI_REGISTRY_IMAGE}/docs:latest
    script:
        - apk --update add make python3
        - pip3 install jinja2 pathlib
        - .ci/gitlab/deploy_docs.bash
    # only:
    #   - master
    #   - tags
    artifacts:
        paths:
            - public

{%- for py, m in matrix %}
{{m}} {{py[0]}} {{py[2]}}:
    extends: .pytest
    services:
        - name: pymor/pypi-mirror_stable_py{{py}}:{{pypi_mirror_tag}}
          alias: pypi_mirror
    image: pymor/testing_py{{py}}:{{ci_image_tag}}
    variables:
        PYMOR_PYTEST_MARKER: "{{m}}"
{%- endfor %}

{# note: only Vanilla and numpy runs generate coverage or test_results so we can skip others entirely here #}
.submit:
    extends: .test_base
    retry:
        max: 2
        when:
            - always
    environment:
        name: safe
    except:
        - /^github\/PR_.*$/
        - /^staging/.*$/i
    stage: deploy
    script: .ci/gitlab/submit.bash

{%- for py, m in matrix if m == 'Vanilla' %}
submit {{m}} {{py[0]}} {{py[2]}}:
    extends: .submit
    image: pymor/python:{{py}}
    dependencies:
        - {{m}} {{py[0]}} {{py[2]}}
    variables:
        PYMOR_PYTEST_MARKER: "{{m}}"
{%- endfor %}

submit numpy-git 3 6:
    extends: .submit
    image: pymor/python:3.6
    dependencies:
        - numpy-git 3 6
    variables:
        PYMOR_PYTEST_MARKER: "numpy"

submit oldest 3.6:
    extends: .submit
    image: pymor/python:3.6
    dependencies:
        - oldest 3.6
    variables:
        PYMOR_PYTEST_MARKER: "OLDEST"

# this step makes sure that on older python our install fails with
# a nice message ala "python too old" instead of "SyntaxError"
verify setup.py:
    extends: .test_base
    image: python:3.5-alpine
    stage: sanity
    script:
        - python setup.py egg_info

.docker-in-docker:
    tags:
      - docker-in-docker
    extends: .test_base
    retry:
        max: 2
        when:
            - always
    image: docker:stable
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    before_script:
        - apk --update add openssh-client rsync git file bash python3 curl make
        # hotfix for https://github.com/jupyter/repo2docker/issues/755
        - pip3 install ruamel.yaml==0.15.100
        - pip3 install jinja2 jupyter-repo2docker docker-compose
        - 'export SHARED_PATH="${CI_PROJECT_DIR}/shared"'
        - mkdir -p ${SHARED_PATH}
    services:
        - docker:dind
    environment:
        name: unsafe

{% for OS in testos %}
pip {{loop.index}}/{{loop.length}}:
    extends: .docker-in-docker
    stage: install_checks
    script: docker build -f .ci/docker/install_checks/{{OS}}/Dockerfile .
{% endfor %}

# this should ensure binderhubs can still build a runnable image from our repo
.binder:
    extends: .docker-in-docker
    stage: install_checks
    variables:
        IMAGE: ${CI_REGISTRY_IMAGE}/binder:${CI_COMMIT_REF_SLUG}
        CMD: "jupyter nbconvert --to notebook --execute /pymor/.ci/ci_dummy.ipynb"
        USER: juno

repo2docker:
    extends: .binder
    script:
        - repo2docker --user-id 2000 --user-name ${USER} --no-run --debug --image-name ${IMAGE} .
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - docker run ${IMAGE} ${CMD}
        - docker push ${IMAGE}

local_jupyter:
    extends: .binder
    script:
        - make docker_image
        - make DOCKER_CMD="${CMD}" docker_exec
{% for url in binder_urls %}
trigger_binder {{loop.index}}/{{loop.length}}:
    extends: .test_base
    stage: deploy
    image: alpine:3.10
    only:
        - master
        - tags
    before_script:
        - apk --update add bash python3
        - pip3 install requests
    script:
        - python3 .ci/gitlab/trigger_binder.py "{{url}}/${CI_COMMIT_REF}"
{% endfor %}

.wheel:
    extends: .docker-in-docker
    stage: build
    only: ['branches', 'tags', 'triggers']
    variables:
        TEST_OS: "{{ ' '.join(testos) }}"
    artifacts:
        paths:
        # cannot use exported var from env here
        - ${CI_PROJECT_DIR}/shared/pymor*manylinux*whl
        expire_in: 1 week

{%- for PY in pythons %}
{%- for ML in [1, 2010, 2014] %}
wheel {{ML}} py{{PY[0]}} {{PY[2]}}:
    extends: .wheel
    variables:
        PYVER: "{{PY}}"
    script: bash .ci/gitlab/wheels.bash {{ML}}
{% endfor %}
{% endfor %}

.check_wheel:
    extends: .test_base
    stage: install_checks
    services:
      - pymor/devpi:1
    dependencies:
    {%- for PY in pythons %}
    {%- for ML in [1, 2010, 2014] %}
      - "wheel {{ML}} py{{PY[0]}} {{PY[2]}}"
    {%- endfor %}
    {%- endfor %}
    before_script:
      - pip3 install devpi-client
      - devpi use http://pymor__devpi:3141/root/public --set-cfg
      - devpi login root --password none
      - devpi upload --from-dir --formats=* ./shared
    only: ['branches', 'tags', 'triggers']
    # the docker service adressing fails on other runners
    tags: [mike]

{% for OS in testos %}
check_wheel {{loop.index}}:
    extends: .check_wheel
    image: pymor/deploy_checks:devpi_{{OS}}
    script: devpi install pymor[full]
{% endfor %}

sanity:
    extends: .docker-in-docker
    stage: sanity
    script: ./.ci/gitlab/ci_sanity_check.bash

# THIS FILE IS AUTOGENERATED -- DO NOT EDIT #
#   Edit and Re-run .ci/gitlab/template.ci.py instead       #

'''


import os
import jinja2
import sys
from itertools import product
tpl = jinja2.Template(tpl)
pythons = ['3.6', '3.7', '3.8']
# these should be all instances in the federation
marker = ["Vanilla", "PIP_ONLY", "NOTEBOOKS", "MPI"]
binder_urls = ['https://gke.mybinder.org/build/gh/pymor/pymor',
               'https://ovh.mybinder.org/build/gh/pymor/pymor']
testos = ['centos_8', 'debian_buster', 'debian_testing']
ci_image_tag = open(os.path.join(os.path.dirname(__file__), '..', 'CI_IMAGE_TAG'), 'rt').read()
pypi_mirror_tag = open(os.path.join(os.path.dirname(__file__), '..', 'PYPI_MIRROR_TAG'), 'rt').read()
with open(os.path.join(os.path.dirname(__file__), 'ci.yml'), 'wt') as yml:
    matrix = list(product(pythons, marker))
    yml.write(tpl.render(**locals()))
