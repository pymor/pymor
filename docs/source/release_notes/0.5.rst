

pyMOR 0.5 (January 17, 2019)
----------------------------

After more than two years of development, we are proud to announce the release
of pyMOR 0.5! Highlights of this release are support for Python 3, bindings for
the NGSolve finite element library, new linear algebra algorithms, various
|VectorArray| usability improvements, as well as a redesign of pyMOR's
projection algorithms based on |RuleTables|.

Especially we would like to highlight the addition of various system-theoretic
reduction methods such as Balanced Truncation or IRKA. All algorithms are
implemented in terms of pyMOR's |Operator| and |VectorArray| interfaces,
allowing their application to any model implemented using one of the PDE solver
supported by pyMOR. In particular, no import of the system matrices is
required.

Over 1,500 single commits have entered this release. For a full list of changes
see `here <https://github.com/pymor/pymor/compare/0.4.x...0.5.x>`__.

pyMOR 0.5 contains contributions by Linus Balicki, Julia Brunken and Christoph
Lehrenfeld. See `here <https://github.com/pymor/pymor/blob/master/AUTHORS.md>`__
for more details.



Release highlights
^^^^^^^^^^^^^^^^^^


Python 3 support
~~~~~~~~~~~~~~~~

pyMOR is now compatible with Python 3.5 or greater. Since the use of Python 3 is
now standard in the scientific computing community and security updates for
Python 2 will stop in less than a year (https://pythonclock.org), we decided to
no longer support Python 2 and make pyMOR 0.5 a Python 3-only release. Switching
to Python 3 also allows us to leverage newer language features such as the `@`
binary operator for concatenation of |Operators|, keyword-only arguments or
improved support for asynchronous programming.



System-theoretic MOR methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With 386 commits, `[#464] <https://github.com/pymor/pymor/pull/464>`_ added
systems-theoretic methods to pyMOR. Module :mod:`pymor.discretizations.iosys`
contains new discretization classes for input-output systems, e.g. `LTISystem`,
`SecondOrderSystem` and |TransferFunction|. At present, methods related to these
classes mainly focus on continuous-time, non-parametric systems.

Since matrix equation solvers are important tools in many system-theoretic
methods, support for Lyapunov, Riccati and Sylvester equations has been added in
:mod:`pymor.algorithms.lyapunov`, :mod:`pymor.algorithms.riccati` and
:mod:`pymor.algorithms.sylvester`. A generic low-rank ADI (Alternating Direction
Implicit) solver for Lyapunov equations is implemented in
:mod:`pymor.algorithms.lradi`. Furthermore, bindings to low-rank and dense
solvers for Lyapunov and Riccati equations from |SciPy|,
`Slycot <https://github.com/python-control/Slycot>`_ and
`Py-M.E.S.S. <https://www.mpi-magdeburg.mpg.de/projects/mess>`_ are provided in
:mod:`pymor.bindings.scipy`, :mod:`pymor.bindings.slycot` and
:mod:`pymor.bindings.pymess`. A generic Schur decomposition-based solver for
sparse-dense Sylvester equations is implemented in
:mod:`pymor.algorithms.sylvester`.

Balancing Truncation (BT) and Iterative Rational Krylov Algorithm (IRKA) are
implemented in :class:`~pymor.reductors.bt.BTReductor` and
:class:`~pymor.reductors.h2.IRKAReductor`. LQG and Bounded Real variants of BT
are also available (:class:`~pymor.reductors.bt.LQGBTReductor`,
:class:`~pymor.reductors.bt.BRBTReductor`). Bitangential Hermite interpolation
(used in IRKA) is implemented in
:class:`~pymor.reductors.interpolation.LTI_BHIReductor`. Two-Sided Iteration
Algorithm (TSIA), a method related to IRKA, is implemented in
:class:`~pymor.reductors.h2.TSIAReductor`.

Several structure-preserving MOR methods for second-order systems have been
implemented. Balancing-based MOR methods are implemented in
:mod:`pymor.reductors.sobt`, bitangential Hermite interpolation in
:class:`~pymor.reductors.interpolation.SO_BHIReductor` and Second-Order Reduced
IRKA (SOR-IRKA) in :class:`~pymor.reductors.sor_irka.SOR_IRKAReductor`.

For more general transfer functions, MOR methods which return `LTISystems` are
also available. Bitangential Hermite interpolation is implemented in
:class:`~pymor.reductors.interpolation.TFInterpReductor` and Transfer Function
IRKA (TF-IRKA) in :class:`~pymor.reductors.h2.TF_IRKAReductor`.

Usage examples can be found in the `heat` and `string_equation` demo scripts.


NGSolve support
~~~~~~~~~~~~~~~

We now ship bindings for the `NGSolve <https://ngsolve.org>`_ finite element
library. Wrapper classes for |VectorArrays| and matrix-based |Operators| can be
found in the :mod:`pymor.bindings.ngsolve` module. A usage example can be found
in the `thermalblock_simple` demo script.


New linear algebra algorithms
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pyMOR now includes an implementation of the
`HAPOD algorithm <https://doi.org/10.1137/16M1085413>`_ for fast distributed
or incremental computation of the Proper Orthogonal Decomposition
(:mod:`pymor.algorithms.hapod`). The code allows for arbitrary sub-POD trees,
on-the-fly snapshot generation and shared memory parallelization via
:mod:`concurrent.futures`. A basic usage example can be found in the `hapod`
demo script.

In addition, the Gram-Schmidt biorthogonalization algorithm has been included in
:mod:`pymor.algorithms.gram_schmidt`.


VectorArray improvements
~~~~~~~~~~~~~~~~~~~~~~~~

|VectorArrays| in pyMOR have undergone several usability improvements:

- The somewhat dubious concept of a `subtype` has been superseded by the concept
  of |VectorSpaces| which act as factories for |VectorArrays|. In particular,
  instead of a `subtype`, |VectorSpaces| can now hold meaningful attributes
  (e.g. the dimension) which are required to construct |VectorArrays| contained
  in the space. The
  :attr:`~pymor.vectorarrays.interfaces.VectorSpaceInterface.id` attribute
  allows to differentiate between technically identical but mathematically
  different spaces `[#323] <https://github.com/pymor/pymor/pull/323>`_.

- |VectorArrays| can now be indexed to select a subset of vectors to operate on.
  In contrast to advanced indexing in |NumPy|, indexing a |VectorArray| will
  always return a view onto the original array data
  `[#299] <https://github.com/pymor/pymor/pull/299>`_.

- New methods with clear semantics have been introduced for the conversion of
  |VectorArrays| to
  (:meth:`~pymor.vectorarrays.interfaces.VectorArrayInterface.to_numpy`) and
  from (:meth:`~pymor.vectorarrays.interfaces.VectorSpaceInterface.from_numpy`)
  |NumPy arrays| `[#446] <https://github.com/pymor/pymor/pull/446>`_.

- Inner products between |VectorArrays| w.r.t. to a given inner product
  |Operator| or their norm w.r.t. such an operator can now easily be computed by
  passing the |Operator| as the optional `product` argument to the new
  :meth:`~pymor.vectorarrays.interfaces.VectorArrayInterface.inner` and
  :meth:`~pymor.vectorarrays.interfaces.VectorArrayInterface.norm` methods
  `[#407] <https://github.com/pymor/pymor/pull/407>`_.

- The `components` method of |VectorArrays| has been renamed to the more
  intuitive name
  :meth:`~pymor.vectorarrays.interfaces.VectorArrayInterface.dofs`
  `[#414] <https://github.com/pymor/pymor/pull/414>`_.

- The :meth:`~pymor.vectorarrays.interfaces.VectorArrayInterface.l2_norm2` and
  :meth:`~pymor.vectorarrays.interfaces.VectorArrayInterface.norm2` have been
  introduced to compute the squared vector norms
  `[#237] <https://github.com/pymor/pymor/pull/237>`_.



RuleTable based algorithms
~~~~~~~~~~~~~~~~~~~~~~~~~~

In pyMOR 0.5, projection algorithms are implemented via recursively applied
tables of transformation rules. This replaces the previous inheritance-based
approach. In particular, the `projected` method to perform a (Petrov-)Galerkin
projection of an arbitrary |Operator| has been removed and replaced by a free
|project| function. Rule-based algorithms are implemented by deriving from the
|RuleTable| base class `[#367] <https://github.com/pymor/pymor/pull/367>`_,
`[#408] <https://github.com/pymor/pymor/pull/408>`_.

This approach has several advantages:

- Rules can match based on the class of the object, but also on more general
  conditions, e.g. the name of the |Operator| or being linear and
  non-|parametric|.
- The entire mathematical algorithm can be specified in a single file even when
  the definition of the possible classes the algorithm can be applied to is
  scattered over various files.
- The precedence of rules is directly apparent from the definition of the
  |RuleTable|.
- Generic rules (e.g. the projection of a linear non-|parametric| |Operator| by
  simply applying the basis) can be easily scheduled to take precedence over
  more specific rules.
- Users can implement or modify |RuleTables| without modification of the classes
  shipped with pyMOR.



Additional new features
^^^^^^^^^^^^^^^^^^^^^^^

- Reduction algorithms are now implemented using mutable reductor objects, e.g.
  :class:`~pymor.reductors.basic.GenericRBReductor`, which store and
  :meth:`extend <pymor.reductors.basic.GenericRBReductor.extend_basis>` the
  reduced bases onto which the model is projected. The only return value of the
  reductor's :meth:`~pymor.reductors.basic.GenericRBReductor.reduce` method is
  now the reduced discretization. Instead of a separate reconstructor, the
  reductor's :meth:`~pymor.reductors.basic.GenericRBReductor.reconstruct` method
  can be used to reconstruct a high-dimensional state-space representation.
  Additional reduction data (e.g. used to speed up repeated reductions in greedy
  algorithms) is now managed by the reductor
  `[#375] <https://github.com/pymor/pymor/pull/375>`_.

- Linear combinations and concatenations of |Operators| can now easily be formed
  using arithmetic operators `[#421] <https://github.com/pymor/pymor/pull/421>`_.

- The handling of complex numbers in pyMOR is now more consistent. See
  `[#458] <https://github.com/pymor/pymor/pull/459>`_,
  `[#362] <https://github.com/pymor/pymor/pull/362>`_,
  `[#447] <https://github.com/pymor/pymor/pull/447>`_
  for details. As a consequence of these changes, the `rhs` |Operator| in
  `StationaryDiscretization` is now a vector-like |Operator| instead of a functional.

- The analytical problems and discretizers of pyMOR's discretization toolbox
  have been reorganized and improved. All problems are now implemented as
  instances of |StationaryProblem| or |InstationaryProblem|, which allows an
  easy exchange of data |Functions| of a predefined problem with user-defined
  |Functions|. Affine decomposition of |Functions| is now represented by
  specifying a :class:`~pymor.functions.basic.LincombFunction` as the respective
  data function
  `[#312] <https://github.com/pymor/pymor/pull/312>`_,
  `[#316] <https://github.com/pymor/pymor/pull/316>`_,
  `[#318] <https://github.com/pymor/pymor/pull/318>`_,
  `[#337] <https://github.com/pymor/pymor/pull/337>`_.

- The :mod:`pymor.core.config` module allows simple run-time checking of the
  availability of optional dependencies and their versions
  `[#339] <https://github.com/pymor/pymor/pull/339>`_.

- Packaging improvements

  A compiler toolchain is no longer necessary to install pyMOR as we are now
  distributing binary wheels for releases through the Python Package Index
  (PyPI). Using the `extras_require` mechanism the user can select to install
  either a minimal set::

    pip install pymor

  or almost all, including optional, dependencies::

    pip install pymor[full]

  A docker image containing all of the discretization packages pyMOR has
  bindings to is available for demonstration and development purposes::

    docker run -it pymor/demo:0.5 pymor-demo -h
    docker run -it pymor/demo:0.5 pymor-demo thermalblock --fenics 2 2 5 5



Backward incompatible changes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

- `dim_outer` has been removed from the grid interface `[#277]
  <https://github.com/pymor/pymor/pull/277>`_.

- All wrapper code for interfacing with external PDE libraries or equation
  solvers has been moved to the :mod:`pymor.bindings` package. For instance,
  `FenicsMatrixOperator` can now be found in the :mod:`pymor.bindings.fenics`
  module. `[#353] <https://github.com/pymor/pymor/pull/353>`_

- The `source` and `range` arguments of the constructor of
  :class:`~pymor.operators.constructions.ZeroOperator` have
  been swapped to comply with related function signatures
  `[#415] <https://github.com/pymor/pymor/pull/415>`_.

- The identifiers `discretization`, `rb_discretization`, `ei_discretization`
  have been replaced by `d`, `rd`, `ei_d` throughout pyMOR
  `[#416] <https://github.com/pymor/pymor/pull/416>`_.

- The `_matrix` attribute of |NumpyMatrixOperator| has been renamed to `matrix`
  `[#436] <https://github.com/pymor/pymor/pull/436>`_. If `matrix` holds a
  |NumPy array| this array is automatically made read-only to prevent accidental
  modification of the |Operator| `[#462] <https://github.com/pymor/pymor/pull/462>`_.

- The `BoundaryType` class has been removed in favor of simple strings `[#305]
  <https://github.com/pymor/pymor/pull/305>`_.

- The complicated and unused mapping of local parameter component names to
  global names has been removed `[#306] <https://github.com/pymor/pymor/pull/306>`_.



Further notable improvements
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- `[#176] Support different colormaps in GLPatchWidget <https://github.com/pymor/pymor/pull/176>`_.
- `[#238] From Operator to NumPy operator <https://github.com/pymor/pymor/pull/238>`_.
- `[#308] Add NumpyGenericOperator.apply_adjoint <https://github.com/pymor/pymor/pull/308>`_.
- `[#313] Add finiteness checks to linear solvers <https://github.com/pymor/pymor/pull/313>`_.
- `[#314] [ExpressionFunction] add components of mu to locals <https://github.com/pymor/pymor/pull/314>`_.
- `[#315] [functions] some improvements to ExpressionFunction/GenericFunction <https://github.com/pymor/pymor/pull/315>`_.
- `[#338] Do not print version string on import <https://github.com/pymor/pymor/pull/338>`_.
- `[#346] Implement more arithmetic operations on VectorArrays and Operators <https://github.com/pymor/pymor/pull/346>`_.
- `[#348] add InverseOperator and InverseTransposeOperator <https://github.com/pymor/pymor/pull/348>`_.
- `[#359] [grids] bugfix for boundary handling in subgrid <https://github.com/pymor/pymor/pull/359>`_.
- `[#365] [operators] add ProxyOperator <https://github.com/pymor/pymor/pull/365>`_.
- `[#366] [operators] add LinearOperator and AffineOperator <https://github.com/pymor/pymor/pull/366>`_.
- `[#368] Add support for PyQt4 and PyQt5 by using Qt.py shim <https://github.com/pymor/pymor/pull/368>`_.
- `[#369] Add basic support for visualization in juypter notebooks <https://github.com/pymor/pymor/pull/369>`_.
- `[#370] Let BitmapFunction accept non-grayscale images <https://github.com/pymor/pymor/pull/370>`_.
- `[#382] Support mpi4py > 2.0 <https://github.com/pymor/pymor/pull/382>`_.
- `[#401] [analyticalproblems] add text_problem <https://github.com/pymor/pymor/pull/401>`_.
- `[#410] add relative_error and project_array functions <https://github.com/pymor/pymor/pull/410>`_.
- `[#422] [Concatenation] allow more than two operators in a Concatenation <https://github.com/pymor/pymor/pull/422>`_.
- `[#425] [ParameterType] base implementation on OrderedDict <https://github.com/pymor/pymor/pull/425>`_.
- `[#431] [operators.cg] fix first order integration <https://github.com/pymor/pymor/pull/431>`_.
- `[#437] [LincombOperator] implement 'apply_inverse' <https://github.com/pymor/pymor/pull/437>`_.
- `[#438] Fix VectorArrayOperator, generalize as_range/source_array <https://github.com/pymor/pymor/pull/438>`_.
- `[#441] fix #439 (assemble_lincomb "operators" parameter sometimes list, sometimes tuple) <https://github.com/pymor/pymor/pull/441>`_.
- `[#452] Several improvements to pymor.algorithms.ei.deim <https://github.com/pymor/pymor/pull/452>`_.
- `[#453] Extend test_assemble <https://github.com/pymor/pymor/pull/453>`_.
- `[#480| [operators] Improve subtraction of LincombOperators <https://github.com/pymor/pymor/pull/480>`_.
- `[#481] [project] ensure solver_options are removed from projected operators <https://github.com/pymor/pymor/pull/481>`_.
- `[#484] [docs] move all references to bibliography.rst <https://github.com/pymor/pymor/pull/484>`_.
- `[#488] [operators.block] add BlockRowOperator, BlockColumnOperator <https://github.com/pymor/pymor/pull/488>`_.
- `[#489] Output functionals in CG discretizations <https://github.com/pymor/pymor/pull/489>`_.
- `[#497] Support automatic conversion of InstationaryDiscretization to LTISystem <https://github.com/pymor/pymor/pull/497>`_.
