[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pymor"
dynamic = ["version"]
description = " "
readme = "README.md"
license.file = "LICENSE.txt"
requires-python = ">=3.8"
authors = [
    { name = "pyMOR developers", email = "main.developers@pymor.org" },
]
maintainers = [
    { name = "Stephan Rave", email = "stephan.rave@uni-muenster.de" },
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Mathematics",
]
dependencies = [
    "diskcache",
    "matplotlib",
    "numpy>=1.20.3",
    "packaging",
    "pillow",
    "pygments",
    "qtpy>2.0",
    "scipy>=1.5.4",
    "typer",
]

[project.optional-dependencies]
# additional dependencies for building docs via 'make docs'
docs = [
   "pymor[docs_additional,jupyter,slycot,ann]"
]

# we have the docs-related additional dependencies as a separate extra here
# to avoid pip-compile include pymor itself as a dependency, why is happening
# when recursive extras are used within recursive extras
docs-additional = [
    "bash_kernel",
    "docutils",
    "myst-nb>=0.16",
    "pybind11[global]",
    "python-slugify",
    "sphinx-autoapi>=1.8,<2",
    "sphinx-material",
    "sphinx>=5.0,<5.2",
    "sphinxcontrib-bibtex",
]

# additional dependencies for running tests via 'make tests'
tests = [
    "hypothesis[numpy,pytest]==6.56.3",  # pin hypothesis version to ensure deterministic tests
    "pytest-notebook",
    "pytest-cov",
    "pytest-datadir",
    "pytest>=7.2.1",  # 7.2.0 causes format_source tests to fail do to wrong paths in co_filename
]

# additional dependencies for pyMOR development
dev = [
    "ruff==0.0.242",      # our linter of choice
    "conda_lock==1.4.0",  # needed for make ci_conda_requirements
]


### Optional dependencies for MOR algorithms

# dependencies for deep-learning based MOR methods
ann = [
    "torch>=1.11.0",
]

# dense matrix equation solver for system-theoretic methods and H-infinity norm calculation
# requires OpenBLAS headers and a Fortran compiler
slycot = [
    "slycot>=0.5.4",
]

# dense and sparse matrix equation solvers for system-theoretic methods (recommended to be installed from source)
pymess = [
    "pymess"
]

# parallelization of some MOR algorithms (e.g. greedy search) using ipyparallel
ipyparallel = [
    "ipyparallel>=6.2.5",
]

# parallelization of some MOR algorithms (e.g. greedy search) using mpi
# support for MPI-distributed solvers
mpi = [
    "mpi4py>=3.0.3",
]


### Builtin discretizations

# GUI support for builtin discretizations
gui = [
    "PySide2>=5.15.2.1",
    "pyopengl",
]

# jupyter integration
jupyter = [
    "jupyter_contrib_nbextensions",
    "jupyter_server>1.3,<2.0",
    "ipywidgets>7",
    "k3d>=2.15.1",
]

# VTK output for builtin discretizations
vtk = [
    "lxml",
    "meshio>=4.4",
    "pyevtk",
    "xmljson",
]

# gmsh support for builtin discretizations
gmsh = [
    "gmsh",
]


## Supported external solvers available on PyPI

dune = [
    "dune-xt[visualisation]>=2022.5.3; platform_system==\"Linux\" and platform_machine==\"x86_64\"",
    "dune-gdt>=2022.5.3; platform_system==\"Linux\" and platform_machine==\"x86_64\"",
]

ngsolve = [
    "ngsolve",
]

scikit-fem = [
    "scikit-fem>=6.0.0",
]


## Meta dependecies

# install all optional dependencies, except those requiring a compiler toolchain to build
# pymess is excluded here as installation from source is recommended by the developers
full = [
    "pymor[docs_additional,tests,dev,ann,ipyparallel,gui,jupyter,vtk,gmsh,dune,ngsolve,scikit-fem]",
]

# install all optional dependencies, including those requiring a compiler toolchain to build
full_compiled = [
    "pymor[full,slycot,mpi]",
]


[project.scripts]
pymor-demo = "pymor.scripts.pymor_demo:run"
pymor-vis = "pymor.scripts.pymor_vis:run"

[project.urls]
Homepage = "https://pymor.org"

[tool.hatch.version]
path = "src/pymor/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/docs",
    "CITATION.cff"
]

[tool.hatch.build.targets.wheel]
packages = [
    "/src/pymor",
    "/src/pymordemos",
]


[tool.pytest.ini_options]
pythonpath = "src"
testpaths = "src/pymortests"
python_files = "*.py"
# exclude misbehaving plugin from auto load
addopts = "-p no:nb_regression --durations 10"
junit_family = "xunit2"
markers = [
    "builtin: test does not require external PDE solver"
]


# omit the runtime compiled source of pymor.analyticalproblems.expression.Expression
[tool.coverage.report]
omit = [
  "expression",
  "*/expression",
  "src/pymor/version.py",
  "pymor/version",
]

[tool.coverage.run]
relative_files = true
source = [
  "src",
]
source_pkgs = [
  "pymor",
]
omit = [
  "expression",
  "*/expression",
  "src/pymor/version.py",
  "pymor/version",
]

# each entry is a list of paths that coverage will consider to be equivalent
# this allows to map source files if pymor is imported from installed package
[tool.coverage.paths]
root = [
  "/pymor",
  "src/pymor",
]


[tool.ruff]
# this makes isort behave nicely
src = ["src"]
line-length = 120
select = ["D", "E", "F", "I", "ICN", "N", "Q", "W"]
ignore = [
    "D10", "D404",
    "D401", "D405", "D407", "D410", "D411", "D414", # related to 'parameters'
    "E402", "E731", "E741",
    "F722",
    "N802", "N803", "N806"]
# D10? missing docstring in module, function, method, magic, __init__, public nested class
# D404 First word of the docstring should not be "This"
# D405, D407, D410, D411, D414 The linter thins the argument name 'parameters' is a docstring section
# E402 module level import not at top of file (due to config.require("PKG") syntax)
# E731 do not assign a lambda expression, use a def
# E741 do not use variables named 'l', 'O', or 'I'
# F722 syntax error in forward annotation
# N802 function name should be lowercase
# N803 argument name should be lowercase (we use single capital letters everywhere for vectorarrays)
# N806 same for variables in function

[tool.ruff.flake8-import-conventions]
[tool.ruff.flake8-import-conventions.extend-aliases]
"scipy.linalg" = "spla"

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"src/pymor/algorithms/rules.py" = ["N801", "N805"] # class name CapWords convention, first argument should be `self`
"src/pymor/analyticalproblems/expressions.py" = ["N801"] # class name CapWords convention
"versioneer.py" = ["N801"] # class name CapWords convention
"docs/source/try_on_binder.py" = ["N801"] # class name CapWords convention
"src/pymordemos/*" = ["F403", "F405"] # undefined import due to pymor.basic functionality

[tool.ruff.pycodestyle]
max-doc-length = 100

[tool.ruff.pydocstyle]
convention = "numpy"

# test
