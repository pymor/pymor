name: "Run tests in miniconda environment"

inputs:
  python:
    required: true
    type: string
  prefix:
    required: true
    type: string
  os:
    required: true
    type: string
  coverage_file:
    required: true
    type: string
  results_file:
    required: true
    type: string
  hypothesis_profile:
    required: false
    type: string
    default: "ci"
runs:
  using: "composite"
  steps:
    - name: Install required X libs (Linux)
      shell: bash
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
    - name: Install
      shell: bash
      if: runner.os == 'Windows'
      run: |
        curl --output mesa.7z -L https://github.com/pal1000/mesa-dist-win/releases/download/20.3.4/mesa3d-20.3.4-release-msvc.7z
        7z x mesa.7z -omesa -y


        # The script requires user input (choice of options) so need to
        # fiddle to get it to run automatically. Not a clean way to do it,
        # but works.
        sed -i 's/@echo Please make a deployment choice:/@GOTO desktopgl/g' ./mesa/systemwidedeploy.cmd
        sed -i 's/@echo Desktop OpenGL drivers deploy complete./@exit/g' ./mesa/systemwidedeploy.cmd
        ./mesa/systemwidedeploy.cmd

    - uses: actions/checkout@v3
    - id: req_ci_file
      shell: bash
      run: |
        echo 'contents<<EOF' >> $GITHUB_OUTPUT
        grep -v "\.txt" ./requirements-ci.txt | grep -v "#" >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    - name: provision-with-micromamba
      uses: mamba-org/provision-with-micromamba@v14

      with:
        extra-specs: |
            python=${{ inputs.python }}
            ${{ steps.req_ci_file.outputs.contents }}

        channels: conda-forge
        channel-priority: strict
        cache-env: true
        cache-downloads: true
        cache-env-key: ${{ inputs.python }}-${{ inputs.os }}
        environment-file: .ci/conda-env.yml
        micromamba-version: "latest"
    - name: Install non-conda packages
      shell: bash -l {0}
      run: |
        # step step due to https://github.com/mamba-org/provision-with-micromamba/issues/108
        pip install -r requirements-ci.txt
    - name: Export Conda Env
      shell: bash -l {0}
      run: |
        ${MAMBA_EXE} env export > conda-env__${{ runner.os }}-${{ inputs.python }}.yml
    - name: Platform env
      shell: bash -l {0}
      run: |
        if [[ ${{ runner.os }} == Linux ]]; then
          echo "PYTEST_PREFIX=xvfb-run -a" >> $GITHUB_ENV
          echo "QT_API=pyside2" >> $GITHUB_ENV
        fi
        # windows currently segfaults in first QT+MPL plot otherwise
        if [[ ${{ runner.os }} == Windows ]]; then
          echo "QT_API=pyside2" >> $GITHUB_ENV
        fi
        echo "QT_DEBUG_PLUGINS=1" >> $GITHUB_ENV
    - name: Sanity check
      shell: bash -l {0}
      run: |
        ${PYTEST_PREFIX} python -c "from matplotlib.pyplot import *"
        ${PYTEST_PREFIX} python -c "from qtpy.QtGui import *"
        ${PYTEST_PREFIX} python -c "import OpenGL"
        ${PYTEST_PREFIX} python -c "import OpenGL.GL as gl"
    - name: Run pytest
      shell: bash -l {0}
      env:
        PYTHONPATH: ./src
        PYMOR_HYPOTHESIS_PROFILE: ${{ inputs.hypothesis_profile }}
        # we may be able to limit this to macos
        PYMOR_ALLOW_DEADLINE_EXCESS: 1
        COMMON_PYTEST_OPTS: "--cov-report= --cov --cov-config=setup.cfg --cov-context=test --junitxml=${{ inputs.results_file }}"
        COVERAGE_FILE: ${{ inputs.coverage_file }}
      run: |
        ${PYTEST_PREFIX} pytest ${COMMON_PYTEST_OPTS}
        # make sure to fail if there was an error collecting data
        coverage xml -o ${{ inputs.coverage_file }}.xml --fail-under=10
    - name: Upload Coverage XML
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage_results
        path: ${{ inputs.coverage_file }}.xml
        if-no-files-found: error
    - name: Upload Coverage RAW
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: coverage_results_raw
        path: ${{ inputs.coverage_file }}
        if-no-files-found: error
    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Unit Test Results (Python ${{ inputs.python }}, OS ${{ runner.os }})
        path: ${{ inputs.results_file }}
        if-no-files-found: error
    - name: Upload Conda Env Export
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: Conda Env Exports
        path: conda-env__${{ runner.os }}-${{ inputs.python }}.yml
        if-no-files-found: error
