name: Conda Tests
on:
  # run tests on pull requests for main and release branches
  # and (after a merge) on the target branch
  push:
    branches:
      - main
      - 20*.*.x
      - create-pull-request/patch*
  pull_request:
    branches:
      - main
      - 20*.*.x
      - create-pull-request/patch*

jobs:
  bugout:
    name: Cancel superseded jobs
    runs-on: ubuntu-22.04
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          all_but_latest: true
          # also works on 'pull_request' targets
          ignore_sha: true
          access_token: ${{ github.token }}
  event_file:
    # this is input for the pytest_results workflow
    name: "Event File"
    runs-on: ubuntu-22.04
    steps:
    - name: Upload
      uses: actions/upload-artifact@v3
      with:
        name: Event File
        path: ${{ github.event_path }}
  miniconda:
    name: ${{ matrix.os }} - Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 55
    env:
        RESULTS_FILE: result_${{ matrix.os }}-${{ matrix.python }}.xml
        COVERAGE_FILE: coverage_${{ matrix.os }}-${{ matrix.python }}
    strategy:
        matrix:
            os: [ubuntu-22.04, macos-12, windows-2022]
            python: [3.8, 3.9]
            include:
              - os: ubuntu-22.04
                prefix: /usr/share/miniconda3/envs/pyMOR-ci
              - os: macos-12
                prefix: /Users/runner/miniconda3/envs/pyMOR-ci
              - os: macos-12
                python: 3.8
                prefix: /Users/runner/miniconda3/envs/pyMOR-ci
              - os: windows-2022
                prefix: C:\Miniconda3\envs\pyMOR-ci
            # avoid failure in one job immeadiately cancelling all others
        fail-fast: false
    steps:
      - name: Install required X libs (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
      - name: Install
        if: runner.os == 'Windows'
        run: |
          curl --output mesa.7z -L https://github.com/pal1000/mesa-dist-win/releases/download/20.3.4/mesa3d-20.3.4-release-msvc.7z
          7z x mesa.7z -omesa -y


          # The script requires user input (choice of options) so need to
          # fiddle to get it to run automatically. Not a clean way to do it,
          # but works.
          sed -i 's/@echo Please make a deployment choice:/@GOTO desktopgl/g' ./mesa/systemwidedeploy.cmd
          sed -i 's/@echo Desktop OpenGL drivers deploy complete./@exit/g' ./mesa/systemwidedeploy.cmd
          ./mesa/systemwidedeploy.cmd


      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: pyMOR-ci
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: ${{ matrix.python }}
          channels: conda-forge
          channel-priority: true
           # This needs to be set for caching to work properly!
          use-only-tar-bz2: true
      - name: Stop if dependencies changed
        shell: bash -l {0}
        run: |
          ./dependencies.py && git diff --exit-code requirements* pyproject.toml
      - name: Cache conda
        uses: martijnhols/actions-cache@v3.0.11
        id: cache
        env:
          # Increase this value to reset cache if .ci/conda-env.yml have not changed
          CACHE_NUMBER: 3
        with:
          path: ${{ matrix.prefix }}
          key:
            ${{ runner.os }}-${{ matrix.python }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('.ci/conda-env.yml') }}
      - name: Update environment
        run: mamba env update -n pyMOR-ci -f .ci/conda-env.yml
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Export Conda Env
        shell: bash -l {0}
        run: |
          mamba env export > conda-env__${{ runner.os }}-${{ matrix.python }}.yml
      - name: Install pyMOR
        shell: bash -l {0}
        # this seems to be the most portable way of making sure everything is importable
        run: conda develop .
        # alas it still does not work everywhere, so manual PYTHONPATH it is
      - name: Platform env
        shell: bash -l {0}
        run: |
          if [[ ${{ runner.os }} == Linux ]]; then
            echo "PYTEST_PREFIX=xvfb-run -a" >> $GITHUB_ENV
            echo "QT_API=pyside2" >> $GITHUB_ENV
          fi
          # windows currently segfaults in first QT+MPL plot otherwise
          if [[ ${{ runner.os }} == Windows ]]; then
            echo "QT_API=pyside2" >> $GITHUB_ENV
          fi
          echo "QT_DEBUG_PLUGINS=1" >> $GITHUB_ENV
          echo "PYMOR_VERSION=$(python -c 'import pymor;print(pymor.__version__)')" >> $GITHUB_ENV
      - name: Sanity check
        shell: bash -l {0}
        run: |
          ${PYTEST_PREFIX} python -c "from matplotlib.pyplot import *"
          ${PYTEST_PREFIX} python -c "from qtpy.QtGui import *"
          ${PYTEST_PREFIX} python -c "import OpenGL"
          ${PYTEST_PREFIX} python -c "import OpenGL.GL as gl"
      - name: Run pytest
        shell: bash -l {0}
        env:
          PYTHONPATH: ./src
          PYMOR_HYPOTHESIS_PROFILE: "ci"
          # we may be able to limit this to macos
          PYMOR_ALLOW_DEADLINE_EXCESS: 1
          COMMON_PYTEST_OPTS: "--cov-report= --cov --cov-config=setup.cfg --cov-context=test --junitxml=${RESULTS_FILE}"
        run: |
            ${PYTEST_PREFIX} pytest ${COMMON_PYTEST_OPTS}
            # make sure to fail if there was an error collecting data
            coverage xml -o ${COVERAGE_FILE}.xml --fail-under=10
      - name: Upload Coverage XML
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage_results
          path: ${{env.COVERAGE_FILE}}.xml
      - name: Upload Coverage RAW
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage_results_raw
          path: ${{env.COVERAGE_FILE}}
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Unit Test Results (Python ${{ matrix.python }}, OS ${{ runner.os }})
          path: ${RESULTS_FILE}
      - name: Upload Conda Env Export
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Conda Env Exports
          path: conda-env__${{ runner.os }}-${{ matrix.python }}.yml

  coverage_to_html:
    name: Upload HTML Coverage Report
    runs-on: ubuntu-22.04
    needs: [miniconda]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: coverage_results_raw
          path: ./reports/
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip install coverage
      - name: Generate Report
        run: |
          python .ci/fix_coverage_paths_windows.py reports/coverage_windows-2022-3.*
          coverage combine reports/*
          coverage html --directory coverage_html
      - name: Upload Coverage HTML
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage_html
          path: coverage_html

  coverage_to_codecov:
    name: Report Coverage to codecov.io
    runs-on: ubuntu-22.04
    needs: [miniconda]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: coverage_results
          path: ./reports/
      - uses: codecov/codecov-action@v3
        name: Upload coverage
        with:
          flags: github_actions
          name: github_actions
          fail_ci_if_error: true
          verbose: true
          directory: ./reports/

  full_install:
    name: Install with on ${{ matrix.os }} - Python ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [ubuntu-22.04, macos-12, windows-2022]
            python: [3.8, 3.9]
            include:
              - os: ubuntu-22.04
                prefix: /usr/share/miniconda3/envs/pyMOR-ci
              - os: macos-12
                prefix: /Users/runner/miniconda3/envs/pyMOR-ci
              - os: windows-2022
                prefix: C:\Miniconda3\envs\pyMOR-ci
            # avoid failure in one job immeadiately cancelling all others
        fail-fast: true
    steps:
      - name: Install required X libs (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
      - name: Install
        if: runner.os == 'Windows'
        run: |
          curl --output mesa.7z -L https://github.com/pal1000/mesa-dist-win/releases/download/20.3.4/mesa3d-20.3.4-release-msvc.7z
          7z x mesa.7z -omesa -y


          # The script requires user input (choice of options) so need to
          # fiddle to get it to run automatically. Not a clean way to do it,
          # but works.
          sed -i 's/@echo Please make a deployment choice:/@GOTO desktopgl/g' ./mesa/systemwidedeploy.cmd
          sed -i 's/@echo Desktop OpenGL drivers deploy complete./@exit/g' ./mesa/systemwidedeploy.cmd
          ./mesa/systemwidedeploy.cmd


      - uses: actions/checkout@v3
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: pyMOR-ci
          miniforge-variant: Mambaforge
          use-mamba: true
          python-version: ${{ matrix.python }}
          channels: conda-forge
          channel-priority: true
           # This needs to be set for caching to work properly!
          use-only-tar-bz2: true
      - name: Cache conda
        # only restore here, since pip install might bring things into the cache
        # that aren't controlled via the .ci/conda-env.yml file
        uses: martijnhols/actions-cache/restore@v3.0.11
        id: cache
        env:
          # Increase this value to reset cache if .ci/conda-env.yml have not changed
          CACHE_NUMBER: 3
        with:
          path: ${{ matrix.prefix }}
          key:
            ${{ runner.os }}-${{ matrix.python }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('.ci/conda-env.yml') }}
      - name: Install pyMOR
        shell: bash -l {0}
        run: pip install .[full]
